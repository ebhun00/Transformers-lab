buildscript {
	ext {
		springBootVersion = '1.5.12.RELEASE'
	}
	repositories {
		//mavenCentral()
		maven {
	url "http://mvnrepo.safeway.com/content/groups/SafewayPublicGroup/"
	}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.titan'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	maven {
	url "http://mvnrepo.safeway.com/content/groups/SafewayPublicGroup/"
	}
}

jar {
	baseName = 'ETL-transformer'
	version = '0.0.1'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-activemq')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.2.RELEASE"
	compile "org.webjars:bootstrap:3.3.7"
	compile "org.webjars:angularjs:1.4.9"
	compile ('org.springframework.boot:spring-boot-starter-web')
	compile ('org.springframework.integration:spring-integration-core')
	compile ('org.springframework.integration:spring-integration-xml')
	compile ('org.springframework.integration:spring-integration-file')
	compile ('org.springframework.integration:spring-integration-stream')
	compile ('org.springframework.boot:spring-boot-starter-security')
	compile "io.springfox:springfox-swagger2:2.7.0"
	compile "io.springfox:springfox-swagger-ui:2.7.0"
	compile "org.apache.commons:commons-lang3:3.0"
	compile "com.github.ulisesbocchio:jasypt-spring-boot-starter:1.16"
	compile "joda-time:joda-time:2.9.9"
	compile "com.fasterxml.jackson.core:jackson-annotations:2.9.3"
	compile "com.fasterxml.jackson.core:jackson-core:2.9.3"
	compile "com.fasterxml.jackson.core:jackson-databind:2.9.3"
	compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.3"
    compile "org.projectlombok:lombok:1.16.20"     
	compile "org.springframework.integration:spring-integration-java-dsl:1.2.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-integration"
    compile "commons-io:commons-io:2.5"
    compile "org.springframework.integration:spring-integration-file:5.0.2.RELEASE"
    compile "com.github.noraui:ojdbc7:12.1.0.2"
    compile "org.springframework:spring-jdbc:4.3.8.RELEASE"
    compile "org.springframework:spring-oxm:4.3.8.RELEASE"
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

//http://gdpotter.com/2017/08/14/jaxb-gradle-config/
configurations {
    jaxb
}
dependencies {
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}


task genJaxbCOExport {
  ext.sourcesDir = "${projectDir}/src/main/java/"
  ext.classesDir = "${projectDir}/src/main/java/"
  ext.schema = "${projectDir}/src/main/resources/xsds/CustomerOrderExport.xsd"
  outputs.dir classesDir

  doLast() {
    project.ant {
      // Create output directories
      mkdir(dir: sourcesDir)
      mkdir(dir: classesDir)

      taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath

      xjc(destdir: sourcesDir, schema: schema, 'package': 'com.titan.Transformerslab.xsd.coExport.domains') {
        produces(dir: sourcesDir, includes: '**/*.java')
      }

      javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
            debugLevel: 'lines,vars,source',
            includeantruntime: false,
            classpath: configurations.jaxb.asPath) {
        src(path: sourcesDir)
        include(name: '**/*.java')
        include(name: '*.java')
      }

      copy(todir: classesDir) {
        fileset(dir: sourcesDir, erroronmissingdir: false) {
          exclude(name: '**/*.java')
        }
      }
    }
  }
}

task genJaxbCOImport {
  ext.sourcesDir = "${projectDir}/src/main/java/"
  ext.classesDir = "${projectDir}/src/main/java/"
  ext.schema = "${projectDir}/src/main/resources/xsds/CustomerOrderImport.xsd"
  outputs.dir classesDir

  doLast() {
    project.ant {
      // Create output directories
      mkdir(dir: sourcesDir)
      mkdir(dir: classesDir)

      taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath

      xjc(destdir: sourcesDir, schema: schema, 'package': 'com.titan.Transformerslab.xsd.coImport.domains') {
        produces(dir: sourcesDir, includes: '**/*.java')
      }

      javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
            debugLevel: 'lines,vars,source',
            includeantruntime: false,
            classpath: configurations.jaxb.asPath) {
        src(path: sourcesDir)
        include(name: '**/*.java')
        include(name: '*.java')
      }

      copy(todir: classesDir) {
        fileset(dir: sourcesDir, erroronmissingdir: false) {
          exclude(name: '**/*.java')
        }
      }
    }
  }
}